#summary Explanation of the SimpleDateFormat XML Element, which is used only in the string processor readDateAndTime

<font color="red">THIS PAGE IS UNDER CONSTRUCTION</font>

<wiki:toc max_depth="8" />

= Introduction =

A !SimpleDateFormat element can be created right as there exist Java constructors for the corresponding class.

= !SimpleDateFormat =

a !SimpleDateFormat

*Attributes*
 none

*Occurrence*
 1

*Allowed Children*
 * allowed combinations of children :
   * no children : a default constructor of !SimpleDateFormat will be used
   * 1 !SimpleDateFormatPattern : the constructor !SimpleDateFormat(String pattern) will be used
   * 1 !SimpleDateFormatPattern & 1 !DateFormatSymbols : the constructor !SimpleDateFormat(String pattern, !DateFormatSymbols formatSymbols) will be used
   * 1 !SimpleDateFormatPattern & 1 Locale : the constructor  !SimpleDateFormat(String pattern, Locale locale) will be used

*text field*
none

== !SimpleDateFormatPattern ==

a !SimpleDateFormatPattern

*Attributes*
 none

*Occurrence*
 1

*text*
untrimmed, the date format pattern

== !DateFormatSymbols ==

!DateFormatSymbols

*Attributes*
 none

*Occurrence*
 1

*Children*
 * Locale
 * !AmPmStrings
 * Eras ?
 * Months : a list of twelve strings, seperated by comma
 * !ShortMonths : a list of twelve strings, seperated by comma
 * !WeekDays : a list of seven, seperated by comma
 * !ShortWeekays : a list of seven strings, seperated by comma

*text*
 none   

=== Locale ===

Locale

*Attributes*
 * language
 * country
 * variant
Allowed combinations of language, country and variant follow the three constructors that exist for {@link java.util.Locale}, in addition it is possible to create a locale without specifying any attribute.<br>
if language attribute present then country attribute is allowed<br>
if language and country attribute present, then variant is allowed<br>
if language not present then all get default values<br>
if language present but not country and variant then country and variant get default values<br>
if language and country present, but not variant, then variant gets default value<br>


*Occurrence*
 1

*Children*
 none

*text*
 none   

=== !AmPmStrings ===

the ampm Strings

*Attributes*
 none


*Occurrence*
 1

*Children*
 none

*text*
 a list of two strings, seperated by comma   
     
=== Eras ===

the Eras Strings

*Attributes*
 none


*Occurrence*
 1

*Children*
 none

*text*
 a list of strings, seperated by comma   
      
      
=== Months ===

the Months Strings

*Attributes*
 none


*Occurrence*
 1

*Children*
 none

*text*
 a list of 12 strings, seperated by comma   
      
      
=== !ShortMonths ===

the !ShortMonths Strings

*Attributes*
 none


*Occurrence*
 1

*Children*
 none

*text*
 a list of 12 strings, seperated by comma   
     
=== !WeekDays ===

the !WeekDays Strings

*Attributes*
 none


*Occurrence*
 1

*Children*
 none

*text*
 a list of 7 strings, seperated by comma   
      
=== !ShortWeekDays ===

the !ShortWeekDays Strings

*Attributes*
 none


*Occurrence*
 1

*Children*
 none

*text*
 a list of 7 strings, seperated by comma   
      
      
== Locale ==

Locale

*Attributes*
 * language
 * country
 * variant
Allowed combinations of language, country and variant follow the three constructors that exist for {@link java.util.Locale}, in addition it is possible to create a locale without specifying any attribute.<br>
if language attribute present then country attribute is allowed<br>
if language and country attribute present, then variant is allowed<br>
if language not present then all get default values<br>
if language present but not country and variant then country and variant get default values<br>
if language and country present, but not variant, then variant gets default value<br>


*Occurrence*
 1

*Children*
 none

*text*
 none   
   